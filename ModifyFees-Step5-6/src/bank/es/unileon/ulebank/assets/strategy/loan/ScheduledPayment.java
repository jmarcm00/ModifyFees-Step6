package es.unileon.ulebank.assets.strategy.loan;

import java.text.SimpleDateFormat;
import java.util.Date;

import es.unileon.ulebank.assets.handler.Handler;
import es.unileon.ulebank.assets.handler.ScheduledPaymentHandler;

public class ScheduledPayment {
	/**
	 * Date when the payment will do
	 */
	private Date paymentDate;

	/**
	 * Limit date to do the pay
	 */
	private Date expiration;
	/**
	 * Amount of money to pay
	 */
	private double amountOfTerm;
	/**
	 * Money used for pay the fee
	 */
	private double amortization;
	/**
	 * Amount of money generated for the interests
	 */
	private double interests;
	/**
	 * Amount of money that have not been amortized
	 */
	private double outstandingCapital;

	/**
	 * Says if one fee is or not paid
	 */
	private boolean isPaid;

	/**
	 * Handler identifier for the loan id
	 */
	private Handler scheduledPaymentId;

	/**
	 * Constructor for this class
	 * 
	 * @param expiration
	 * @param importOfterm
	 * @param amortization
	 * @param interests
	 * @param pendingCapital
	 */
	public ScheduledPayment(Date expiration, double importOfterm,
			double amortization, double interests, double pendingCapital) {
		this.expiration = expiration;
		this.amountOfTerm = importOfterm;
		this.amortization = amortization;
		this.interests = interests;
		this.outstandingCapital = pendingCapital;
		this.setPaid(false);
		this.paymentDate = null;

		this.scheduledPaymentId = scheduledPaymentId;

	}

	/**
	 * Return the date when the fee must be paid.
	 * 
	 * @return expiration
	 */
	public Date getExpiration() {
		return expiration;
	}

	/**
	 * Send the finish date to do the payment
	 * 
	 * @param expiration
	 *            Date with the finish date of the payment
	 */
	public void setExpiration(Date expiration) {
		this.expiration = expiration;
	}

	/**
	 * Give the amount of money of the fee
	 * 
	 * @return
	 */
	public double getImportOfTerm() {
		return amountOfTerm;
	}

	/**
	 * Put the amount of money of the fee
	 * 
	 * @param amountOfTerm
	 *            Double with the money of the fee
	 */
	public void setImportOfTerm(double amountOfTerm) {
		this.amountOfTerm = amountOfTerm;
	}

	/**
	 * Give the amount of money amortized
	 * 
	 * @return
	 */
	public double getAmortization() {
		return amortization;
	}

	/**
	 * Set the amount of money amortized in one fee
	 * 
	 * @param amortization
	 *            Double with the amount of money to amortize
	 */
	public void setAmortization(double amortization) {
		this.amortization = amortization;
	}

	/**
	 * Get the amount of money generated by the interests
	 * 
	 * @return
	 */
	public double getInterests() {
		return interests;
	}

	/**
	 * Put the amount of money generated by the interest
	 * 
	 * @param interests
	 *            Double with interests money
	 */
	public void setInterests(double interests) {
		this.interests = interests;
	}

	/**
	 * Get the amount of money not paid yet
	 * 
	 * @return
	 */
	public double getOutstandingCapital() {
		return outstandingCapital;
	}

	/**
	 * Set the amount of money not paid yet
	 * 
	 * @param outstandingCapital
	 *            Double with money not paid yet
	 */
	public void setOutstandingCapital(double outstandingCapital) {
		this.outstandingCapital = outstandingCapital;
	}

	/**
	 * To String method
	 */
	@Override
	public String toString() {
		SimpleDateFormat form = new SimpleDateFormat("dd/MM/yyyy");
		StringBuffer a = new StringBuffer();
		a.append("Expiration date: " + form.format(expiration)
				+ " Import of term: " + amountOfTerm
				+ " Capital Amortization: " + amortization + " Interests: "
				+ interests + " Pending capital: " + outstandingCapital
				+ " is paid: " + isPaid);

		if (paymentDate != null) {
			a.append(" Payment date : " + form.format(paymentDate));
		} else {
			a.append(" Payment date : NOT PAID YET ");
		}

		return a.toString();
	}

	/**
	 * give the information if the fee is or not paid
	 * 
	 * @return boolean true if the fee is paid and false if is not paid
	 * 
	 */
	public boolean isPaid() {
		return this.isPaid;
	}

	/**
	 * Set if one fee is or not paid
	 * 
	 * @param isPaid
	 *            boolean
	 */
	public void setPaid(boolean isPaid) {
		this.isPaid = isPaid;
	}

	/**
	 * Get the date when the fee must be paid
	 * 
	 * @return Date when paid the fee
	 */
	public Date getPaymentDate() {
		return paymentDate;
	}

	/**
	 * Set the payment day for the fee
	 * 
	 * @param paymentDate
	 *            the payment day
	 */
	public void setPaymentDate(Date paymentDate) {
		this.paymentDate = paymentDate;
	}

	/**
	 * Get the unique identifier of the fee
	 * 
	 * @return Handler id of the fee
	 */

	public Handler getId() {
		return this.scheduledPaymentId;
	}

}
